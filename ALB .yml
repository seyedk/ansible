- name: Create ALB
  hosts: localhost
  connection: local
  tasks:
  - name: obtain ACM certificates
    aws_acm_facts:
      region: "{{ awsregion }}"
      domain_name: "{{certificateCN}}"
    register: certs

  - debug:
      msg: "{{ certs }}"

  - name: Save Cert ARN
    set_fact:
      certArn: "{{certs.certificates[0].certificate_arn}}"

  - debug:
      msg: "{{certArn}}"

  - name: inquire VPC
    ec2_vpc_net_facts:
      region: "{{ awsregion }}"
      filters:
        'tag:env-type': "{{ account_name }}"
    register: vpcInfo

  - debug:
      msg: "{{ vpcInfo }}"

  - name: save VPC id
    set_fact:
      vpcid: "{{ vpcInfo.vpcs[0].id }}"
      vpccidr: "{{ vpcInfo.vpcs[0].cidr_block }}"


  - debug:
      msg: "{{ vpcid }}"

  - debug:
      msg: "{{ vpccidr }}"

  - name: create Default SG
    ec2_group:
      name: cg-default-alb-sg
      description: default SG for ALB
      region: "{{awsregion}}"
      vpc_id: "{{vpcid}}"
      state: "present"
      rules:
        - proto: tcp
          ports:
          - 80
          - 443
          cidr_ip: "{{ vpccidr }}"
          rule_desc: allow VPC CIDR on port 80 and 443
    register: sgs
    when: defaultSG

  - debug:
      msg: "{{ sgs }}"

  - name: save SG id
    set_fact:
      sgID: "{{sgs.group_id}}"
    when: defaultSG
    

  - name: create ALB security groups
    ec2_group:
      name: "{{item.name}}"
      description: "{{item.description}}"
      region: "{{awsregion}}"
      vpc_id: "{{vpcid}}"
      state: "present"
      rules: "{{item.rules}}"
    with_items: "{{alb_security_groups}}"
    register: sgs
    when: alb_security_groups is defined

  - debug:
      msg: "{{ sgs }}"

  - name: save SG id
    set_fact:
      sgID: "{{sgs.results[0].group_id}}"
    when: alb_security_groups is defined

  - debug:
      msg: "{{ sgID }}"

  - name: create target group
    elb_target_group:
      name: "{{TargetGroup}}"
      region: "{{awsregion}}"
      protocol: https
      port: 443
      vpc_id: "{{vpcid}}"
      health_check_path: /healthcheck
      successful_response_codes: "200,250-260"
      targets: "{{alb_target_group[0].targets}}"
      state: present
      wait_timeout: 200
      wait: no
    register: tg



  - name: ALB Deploy
    elb_application_lb:
      name: "{{ ALBname}}"
      region: "{{ awsregion }}"
      scheme: "{{ type }}"
      security_groups:
        - "{{ sgID }}"
      subnets: "{{ subnetIDs }}"
      listeners:
        - Protocol: HTTPS
          Port: 443
          SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
          Certificates:
            - CertificateArn: "{{certArn}}"
          DefaultActions:
            - Type: forward
              TargetGroupName: "{{ TargetGroup }}"
      state: present
#      deletion_protection: yes
